name: Run on Demand

on:
  workflow_dispatch:  # This allows the workflow to be manually triggered

env:
  AWS_REGION: us-west-2

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'
          
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Install Docker Compose
        run: |
          sudo apt-get update
          sudo apt-get install -y docker-compose

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@0e613a0980cbf65ed5b322eb7a1e075d28913a83
        with: 
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
        with:
          mask-password: 'true'
          
      - name: Build and push Docker images
        id: build-image
        run: |
          IMAGE_TAG=latest2
          ECR_REGISTRY=${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY_BACKEND=survey_backend 
          ECR_REPOSITORY_FRONTEND=survey_frontend 
          ECR_REPOSITORY_ADMINER=adminer 
          ECR_REPOSITORY_MAILCATCHER=schickling/mailcatcher 
          ECR_REPOSITORY_DB=postgres 
          ECR_REPOSITORY_PROXY=traefik
          cp .env.example .env
          docker compose build
          docker compose down -v --remove-orphans
          docker compose up -d 
          docker tag survey_backend:latest $ECR_REGISTRY/$ECR_REPOSITORY_BACKEND:$IMAGE_TAG 
          docker tag survey_frontend:latest $ECR_REGISTRY/$ECR_REPOSITORY_FRONTEND:$IMAGE_TAG 
          docker tag adminer $ECR_REGISTRY/$ECR_REPOSITORY_ADMINER:$IMAGE_TAG 
          docker tag schickling/mailcatcher $ECR_REGISTRY/$ECR_REPOSITORY_MAILCATCHER:$IMAGE_TAG 
          docker tag postgres:12 $ECR_REGISTRY/$ECR_REPOSITORY_DB:$IMAGE_TAG 
          docker tag traefik:3.0 $ECR_REGISTRY/$ECR_REPOSITORY_PROXY:$IMAGE_TAG 
          docker push $ECR_REGISTRY/$ECR_REPOSITORY_BACKEND:$IMAGE_TAG 
          docker push $ECR_REGISTRY/$ECR_REPOSITORY_FRONTEND:$IMAGE_TAG 
          docker push $ECR_REGISTRY/$ECR_REPOSITORY_ADMINER:$IMAGE_TAG 
          docker push $ECR_REGISTRY/$ECR_REPOSITORY_MAILCATCHER:$IMAGE_TAG 
          docker push $ECR_REGISTRY/$ECR_REPOSITORY_DB:$IMAGE_TAG 
          docker push $ECR_REGISTRY/$ECR_REPOSITORY_PROXY:$IMAGE_TAG

      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: survey-task-definition.json
          container-name-backend: survey_backend
          container-name-frontend: survey_frontend
          container-name-adminer: adminer
          container-name-mailcatcher: schickling/mailcatcher
          container-name-db: postgres
          container-name-proxy: traefik
          image-backend: ${{ steps.build-image.outputs.image }}
          image-frontend: ${{ steps.build-image.outputs.image }}
          image-adminer: ${{ steps.build-image.outputs.image }}
          image-mailcatcher: ${{ steps.build-image.outputs.image }}
          image-db: ${{ steps.build-image.outputs.image }}
          image-proxy: ${{ steps.build-image.outputs.image }}

      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: fastapi-app-service
          cluster: fastapi-app-cluster
          wait-for-service-stability: true
